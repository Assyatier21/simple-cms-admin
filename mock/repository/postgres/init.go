// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/postgres/init.go

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	models "cms-admin/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetArticleDetails mocks base method.
func (m *MockRepository) GetArticleDetails(ctx context.Context, id int) (models.ResArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDetails", ctx, id)
	ret0, _ := ret[0].(models.ResArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleDetails indicates an expected call of GetArticleDetails.
func (mr *MockRepositoryMockRecorder) GetArticleDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDetails", reflect.TypeOf((*MockRepository)(nil).GetArticleDetails), ctx, id)
}

// GetArticles mocks base method.
func (m *MockRepository) GetArticles(ctx context.Context, limit, offset int) ([]models.ResArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx, limit, offset)
	ret0, _ := ret[0].([]models.ResArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockRepositoryMockRecorder) GetArticles(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockRepository)(nil).GetArticles), ctx, limit, offset)
}

// GetCategoryByID mocks base method.
func (m *MockRepository) GetCategoryByID(ctx context.Context, id int) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, id)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockRepositoryMockRecorder) GetCategoryByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockRepository)(nil).GetCategoryByID), ctx, id)
}

// GetCategoryTree mocks base method.
func (m *MockRepository) GetCategoryTree(ctx context.Context) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTree", ctx)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTree indicates an expected call of GetCategoryTree.
func (mr *MockRepositoryMockRecorder) GetCategoryTree(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTree", reflect.TypeOf((*MockRepository)(nil).GetCategoryTree), ctx)
}
