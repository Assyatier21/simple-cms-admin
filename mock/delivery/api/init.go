// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/delivery/api/init.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// DeleteArticle mocks base method.
func (m *MockHandler) DeleteArticle(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockHandlerMockRecorder) DeleteArticle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockHandler)(nil).DeleteArticle), ctx)
}

// DeleteCategory mocks base method.
func (m *MockHandler) DeleteCategory(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockHandlerMockRecorder) DeleteCategory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockHandler)(nil).DeleteCategory), ctx)
}

// GetArticleDetails mocks base method.
func (m *MockHandler) GetArticleDetails(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDetails", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetArticleDetails indicates an expected call of GetArticleDetails.
func (mr *MockHandlerMockRecorder) GetArticleDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDetails", reflect.TypeOf((*MockHandler)(nil).GetArticleDetails), ctx)
}

// GetArticles mocks base method.
func (m *MockHandler) GetArticles(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockHandlerMockRecorder) GetArticles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockHandler)(nil).GetArticles), ctx)
}

// GetCategoryDetails mocks base method.
func (m *MockHandler) GetCategoryDetails(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryDetails", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCategoryDetails indicates an expected call of GetCategoryDetails.
func (mr *MockHandlerMockRecorder) GetCategoryDetails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryDetails", reflect.TypeOf((*MockHandler)(nil).GetCategoryDetails), ctx)
}

// GetCategoryTree mocks base method.
func (m *MockHandler) GetCategoryTree(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTree", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCategoryTree indicates an expected call of GetCategoryTree.
func (mr *MockHandlerMockRecorder) GetCategoryTree(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTree", reflect.TypeOf((*MockHandler)(nil).GetCategoryTree), ctx)
}

// InsertArticle mocks base method.
func (m *MockHandler) InsertArticle(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArticle", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertArticle indicates an expected call of InsertArticle.
func (mr *MockHandlerMockRecorder) InsertArticle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArticle", reflect.TypeOf((*MockHandler)(nil).InsertArticle), ctx)
}

// InsertCategory mocks base method.
func (m *MockHandler) InsertCategory(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCategory", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCategory indicates an expected call of InsertCategory.
func (mr *MockHandlerMockRecorder) InsertCategory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCategory", reflect.TypeOf((*MockHandler)(nil).InsertCategory), ctx)
}

// UpdateArticle mocks base method.
func (m *MockHandler) UpdateArticle(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockHandlerMockRecorder) UpdateArticle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockHandler)(nil).UpdateArticle), ctx)
}

// UpdateCategory mocks base method.
func (m *MockHandler) UpdateCategory(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockHandlerMockRecorder) UpdateCategory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockHandler)(nil).UpdateCategory), ctx)
}
