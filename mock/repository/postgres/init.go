// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/postgres/init.go

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	models "cms-admin/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryHandler is a mock of RepositoryHandler interface.
type MockRepositoryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryHandlerMockRecorder
}

// MockRepositoryHandlerMockRecorder is the mock recorder for MockRepositoryHandler.
type MockRepositoryHandlerMockRecorder struct {
	mock *MockRepositoryHandler
}

// NewMockRepositoryHandler creates a new mock instance.
func NewMockRepositoryHandler(ctrl *gomock.Controller) *MockRepositoryHandler {
	mock := &MockRepositoryHandler{ctrl: ctrl}
	mock.recorder = &MockRepositoryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryHandler) EXPECT() *MockRepositoryHandlerMockRecorder {
	return m.recorder
}

// DeleteArticle mocks base method.
func (m *MockRepositoryHandler) DeleteArticle(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockRepositoryHandlerMockRecorder) DeleteArticle(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockRepositoryHandler)(nil).DeleteArticle), ctx, id)
}

// DeleteCategory mocks base method.
func (m *MockRepositoryHandler) DeleteCategory(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockRepositoryHandlerMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockRepositoryHandler)(nil).DeleteCategory), ctx, id)
}

// GetArticleDetails mocks base method.
func (m *MockRepositoryHandler) GetArticleDetails(ctx context.Context, id int) (models.ResArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDetails", ctx, id)
	ret0, _ := ret[0].(models.ResArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleDetails indicates an expected call of GetArticleDetails.
func (mr *MockRepositoryHandlerMockRecorder) GetArticleDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDetails", reflect.TypeOf((*MockRepositoryHandler)(nil).GetArticleDetails), ctx, id)
}

// GetArticles mocks base method.
func (m *MockRepositoryHandler) GetArticles(ctx context.Context, limit, offset int) ([]models.ResArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx, limit, offset)
	ret0, _ := ret[0].([]models.ResArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockRepositoryHandlerMockRecorder) GetArticles(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockRepositoryHandler)(nil).GetArticles), ctx, limit, offset)
}

// GetCategoryDetails mocks base method.
func (m *MockRepositoryHandler) GetCategoryDetails(ctx context.Context, id int) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryDetails", ctx, id)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryDetails indicates an expected call of GetCategoryDetails.
func (mr *MockRepositoryHandlerMockRecorder) GetCategoryDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryDetails", reflect.TypeOf((*MockRepositoryHandler)(nil).GetCategoryDetails), ctx, id)
}

// GetCategoryTree mocks base method.
func (m *MockRepositoryHandler) GetCategoryTree(ctx context.Context) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTree", ctx)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTree indicates an expected call of GetCategoryTree.
func (mr *MockRepositoryHandlerMockRecorder) GetCategoryTree(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTree", reflect.TypeOf((*MockRepositoryHandler)(nil).GetCategoryTree), ctx)
}

// GetUserRegistry mocks base method.
func (m *MockRepositoryHandler) GetUserRegistry(ctx context.Context, phone, password string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRegistry", ctx, phone, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRegistry indicates an expected call of GetUserRegistry.
func (mr *MockRepositoryHandlerMockRecorder) GetUserRegistry(ctx, phone, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRegistry", reflect.TypeOf((*MockRepositoryHandler)(nil).GetUserRegistry), ctx, phone, password)
}

// InsertArticle mocks base method.
func (m *MockRepositoryHandler) InsertArticle(ctx context.Context, article models.Article) (models.ResArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArticle", ctx, article)
	ret0, _ := ret[0].(models.ResArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertArticle indicates an expected call of InsertArticle.
func (mr *MockRepositoryHandlerMockRecorder) InsertArticle(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArticle", reflect.TypeOf((*MockRepositoryHandler)(nil).InsertArticle), ctx, article)
}

// InsertCategory mocks base method.
func (m *MockRepositoryHandler) InsertCategory(ctx context.Context, category models.Category) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCategory", ctx, category)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCategory indicates an expected call of InsertCategory.
func (mr *MockRepositoryHandlerMockRecorder) InsertCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCategory", reflect.TypeOf((*MockRepositoryHandler)(nil).InsertCategory), ctx, category)
}

// UpdateArticle mocks base method.
func (m *MockRepositoryHandler) UpdateArticle(ctx context.Context, article models.Article) (models.ResArticle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", ctx, article)
	ret0, _ := ret[0].(models.ResArticle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockRepositoryHandlerMockRecorder) UpdateArticle(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockRepositoryHandler)(nil).UpdateArticle), ctx, article)
}

// UpdateCategory mocks base method.
func (m *MockRepositoryHandler) UpdateCategory(ctx context.Context, category models.Category) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, category)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockRepositoryHandlerMockRecorder) UpdateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockRepositoryHandler)(nil).UpdateCategory), ctx, category)
}
