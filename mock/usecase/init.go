// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/init.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecaseHandler is a mock of UsecaseHandler interface.
type MockUsecaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseHandlerMockRecorder
}

// MockUsecaseHandlerMockRecorder is the mock recorder for MockUsecaseHandler.
type MockUsecaseHandlerMockRecorder struct {
	mock *MockUsecaseHandler
}

// NewMockUsecaseHandler creates a new mock instance.
func NewMockUsecaseHandler(ctrl *gomock.Controller) *MockUsecaseHandler {
	mock := &MockUsecaseHandler{ctrl: ctrl}
	mock.recorder = &MockUsecaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseHandler) EXPECT() *MockUsecaseHandlerMockRecorder {
	return m.recorder
}

// DeleteArticle mocks base method.
func (m *MockUsecaseHandler) DeleteArticle(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockUsecaseHandlerMockRecorder) DeleteArticle(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockUsecaseHandler)(nil).DeleteArticle), ctx, id)
}

// DeleteCategory mocks base method.
func (m *MockUsecaseHandler) DeleteCategory(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockUsecaseHandlerMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockUsecaseHandler)(nil).DeleteCategory), ctx, id)
}

// GetArticleDetails mocks base method.
func (m *MockUsecaseHandler) GetArticleDetails(ctx context.Context, id int) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDetails", ctx, id)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleDetails indicates an expected call of GetArticleDetails.
func (mr *MockUsecaseHandlerMockRecorder) GetArticleDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDetails", reflect.TypeOf((*MockUsecaseHandler)(nil).GetArticleDetails), ctx, id)
}

// GetArticles mocks base method.
func (m *MockUsecaseHandler) GetArticles(ctx context.Context, limit, offset int) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", ctx, limit, offset)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockUsecaseHandlerMockRecorder) GetArticles(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockUsecaseHandler)(nil).GetArticles), ctx, limit, offset)
}

// GetCategoryDetails mocks base method.
func (m *MockUsecaseHandler) GetCategoryDetails(ctx context.Context, id int) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryDetails", ctx, id)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryDetails indicates an expected call of GetCategoryDetails.
func (mr *MockUsecaseHandlerMockRecorder) GetCategoryDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryDetails", reflect.TypeOf((*MockUsecaseHandler)(nil).GetCategoryDetails), ctx, id)
}

// GetCategoryTree mocks base method.
func (m *MockUsecaseHandler) GetCategoryTree(ctx context.Context) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTree", ctx)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTree indicates an expected call of GetCategoryTree.
func (mr *MockUsecaseHandlerMockRecorder) GetCategoryTree(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTree", reflect.TypeOf((*MockUsecaseHandler)(nil).GetCategoryTree), ctx)
}

// InsertArticle mocks base method.
func (m *MockUsecaseHandler) InsertArticle(ctx context.Context, title, slug, htmlcontent string, categoryid int, metadata string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertArticle", ctx, title, slug, htmlcontent, categoryid, metadata)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertArticle indicates an expected call of InsertArticle.
func (mr *MockUsecaseHandlerMockRecorder) InsertArticle(ctx, title, slug, htmlcontent, categoryid, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertArticle", reflect.TypeOf((*MockUsecaseHandler)(nil).InsertArticle), ctx, title, slug, htmlcontent, categoryid, metadata)
}

// InsertCategory mocks base method.
func (m *MockUsecaseHandler) InsertCategory(ctx context.Context, title, slug string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCategory", ctx, title, slug)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCategory indicates an expected call of InsertCategory.
func (mr *MockUsecaseHandlerMockRecorder) InsertCategory(ctx, title, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCategory", reflect.TypeOf((*MockUsecaseHandler)(nil).InsertCategory), ctx, title, slug)
}

// UpdateArticle mocks base method.
func (m *MockUsecaseHandler) UpdateArticle(ctx context.Context, id int, title, slug, htmlcontent string, categoryid int, metadata string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", ctx, id, title, slug, htmlcontent, categoryid, metadata)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockUsecaseHandlerMockRecorder) UpdateArticle(ctx, id, title, slug, htmlcontent, categoryid, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockUsecaseHandler)(nil).UpdateArticle), ctx, id, title, slug, htmlcontent, categoryid, metadata)
}

// UpdateCategory mocks base method.
func (m *MockUsecaseHandler) UpdateCategory(ctx context.Context, id int, title, slug string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, id, title, slug)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockUsecaseHandlerMockRecorder) UpdateCategory(ctx, id, title, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockUsecaseHandler)(nil).UpdateCategory), ctx, id, title, slug)
}
